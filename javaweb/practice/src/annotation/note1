自定义注解：
    格式：
      元注解
      public @interface 注解名称{}

    本质：注解本质上就是一个接口，该接口默认继承Annotation接口
      public interface MyAnno extends java,lang.annotation.Annotation{}

    属性：接口中可以定义的 成员方法
      要求：
        1.属性的返回值类型有下列取值
          * 基本数据类型
          * String
          * 枚举
          * 注解
          * 以上类型的数组

        2.定义了属性，在使用时需要给属性赋值
          1.如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值
          2.如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可
          3.数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}省略

元注解：用于描述注解的注解
    @Target：描述注解能够作用的位置
        ElementType取值：
            TYPE：可以作用于类上
            METHOD：可以作用于方法上
            FIELD：可以作用于成员变量上
    @Retention：描述注解被保留的阶段
        @Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
    @Document：描述注解是否被抽取到api文档中
    @Inherited：描述注解是否被子类继承

在程序使用注解：获取注解中定义的属性值
    1.获取注解定义的位置的对象（Class,Method,Field）
    2.获取指定的注释
        getAnnotation(Class)
        其实就是在内存中生成了一个该注释接口的子类实现对象
        public class ProImpl implements Pro{
            public String className(){
                return "完整类名";
            }
            public String methodName(){
                return "方法名";
            }
        }
    3.调用注解中的抽象方法获取配置的属性值